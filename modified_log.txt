12 Dec 2020:
issue: freeze at "Starting kernel" after reading files from USB;
can only read first 32 bytes of the sig file (64bytes).

uint8_t signature_eg1[] = { 0x04, 0xD9, 0x04, 0x6B, 0xC1, 0x9D, 0xAF, 0xA2, 
	0xEC, 0xF0, 0xA8, 0x14, 0x0B, 0x57, 0xAF, 0xDC, 
	0x90, 0xA5, 0x0B, 0xBB, 0x3B, 0x77, 0xC1, 0xDC, 
	0xC6, 0x44, 0xB2, 0x47, 0xAC, 0x93, 0xCE, 0xB6, 
	0x75, 0x34, 0x37, 0x0E, 0x27, 0x8A, 0xA0, 0xC0, 
	0x45, 0xE9, 0xEE, 0xB0, 0xED, 0xD7, 0x3C, 0x64, 
	0x5B, 0xEF, 0x57, 0x18, 0x95, 0x77, 0x2B, 0x55, 
	0x58, 0x71, 0x5E, 0xF9, 0x10, 0xBE, 0x5F, 0x3D };

sig1 read:
{0x04 , 0xD9 , 0x04 , 0x6B , 0xC1 , 0x9D , 0xAF , 0xA2 , 
0xEC , 0xF0 , 0xA8 , 0x14 , 0x0B , 0x57 , 0xAF , 0xDC , 
0x90 , 0xA5 , 0x0B , 0xBB , 0x3B , 0x77 , 0xC1 , 0xDC , 
0xC6 , 0x44 , 0xB2 , 0x47 , 0xAC , 0x93 , 0xCE , 0xB6 , 
0x0A , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 
0x0C , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 
0x0A , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 
0x08 , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 };

uint8_t signature_eg2[] = { 0x57, 0x7E, 0x82, 0x87, 0x72, 0xB8, 0xC4, 0xD7, 
0x70, 0xC9, 0xEA, 0xD2, 0x13, 0x66, 0x94, 0x95, 
0x63, 0x22, 0xD2, 0x2A, 0x01, 0x59, 0x9C, 0x00, 
0x4F, 0x7C, 0xAB, 0xBB, 0x68, 0xB7, 0x84, 0x59, 
0x01, 0x76, 0x5F, 0x66, 0xFF, 0xA1, 0xF1, 0xEC, 
0xFC, 0x35, 0x00, 0x18, 0x42, 0x9A, 0x46, 0xC9, 
0x30, 0x7B, 0x31, 0x41, 0xAE, 0x9B, 0xFE, 0xC8,
0xC6, 0x9C, 0x20, 0x9F, 0x8F, 0x5A, 0x36, 0xDC };

sig2 read:
{0x57 , 0x7E , 0x82 , 0x87 , 0x72 , 0xB8 , 0xC4 , 0xD7 , 
0x70 , 0xC9 , 0xEA , 0xD2 , 0x13 , 0x66 , 0x94 , 0x95 , 
0x63 , 0x22 , 0xD2 , 0x2A , 0x01 , 0x59 , 0x9C , 0x00 , 
0x4F , 0x7C , 0xAB , 0xBB , 0x68 , 0xB7 , 0x84 , 0x59 , 
0x80 , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 
0x0C , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 
0x0A , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 , 
0x08 , 0x03 , 0x00 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 };




U-Boot 1.1.3 (Dec 12 2020 - 20:54:25)

Board: Ralink APSoC DRAM:  128 MB
relocate_code Pointer at: 87f68000
******************************
Software System Reset Occurred
******************************
flash manufacture id: c2, device id 20 19
find flash: MX25L25635E
*** Warning - bad CRC, using default environment

============================================ 
Ralink UBoot Version: 4.3.0.0
-------------------------------------------- 
ASIC 7628_MP (Port5<->None)
DRAM component: 1024 Mbits DDR, width 16
DRAM bus: 16 bit
Total memory: 128 MBytes
Flash component: SPI Flash
Date:Dec 12 2020  Time:20:54:25
============================================ 
icache: sets:512, ways:4, linesz:32 ,total:65536
dcache: sets:256, ways:4, linesz:32 ,total:32768 

 ##### The CPU freq = 580 MHZ #### 
 estimate memory size =128 Mbytes
RESET MT7628 PHY!!!!!!
GPIOMODE --> 50054404

GPIOMODE2 --> 5540551

Please choose the operation: 
   1: Load system code to SDRAM via TFTP. 
   2: Load system code then write to Flash via TFTP. 
   3: Boot system code via Flash (default).
   4: Entr boot command line interface.
   7: Load Boot Loader code then write to Flash via Serial. 
   9: Load Boot Loader code then write to Flash via TFTP.                                                    0 
(Re)start USB...
USB0:   *********ehci_hcd_init**********
Mediatek/Ralink USB EHCI host init hccr b01c0000 and hcor b01c0010 hc_length 16
 6. u2phydcr0(0xb0120860)=0x00aaaa02
 FM_OUT value: u4FmOut = 126(0x0000007E)
 FM detection done! loop = 0
 SR calibration value u1SrCalVal = 7


Register 1111 NbrPorts 1
USB EHCI 1.00
scanning bus 0 for devices... 4 USB Device(s) found
       scanning bus for storage devices... Device NOT ready
   Request Sense returned 00 3A 00
2 Storage Device(s) found
reading publickey1.file



.



.


.


3 bytes read
Find publickey1.file
stopping USB..
   
3: System Boot system code via Flash.
## Booting image at bc050000 ...
   Image Name:   MIPS OpenWrt Linux-5.4.82
   Image Type:   MIPS Linux Kernel Image (lzma compressed)
   Data Size:    1961612 Bytes =  1.9 MB
   Load Address: 80000000
   Entry Point:  80000000
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
No initrd
## Transferring control to Linux (at address 80000000) ...
## Giving linux memsize in MB, 0

Starting kernel ...

[04020C0D][04020D07]
DDR Calibration DQS reg = 00008887


U-Boot 1.1.3 (Dec 12 2020 - 20:54:25)

Board: Ralink APSoC DRAM:  128 MB
relocate_code Pointer at: 87f68000
flash manufacture id: c2, device id 20 19
find flash: MX25L25635E
*** Warning - bad CRC, using default environment

============================================ 
Ralink UBoot Version: 4.3.0.0
-------------------------------------------- 
ASIC 7628_MP (Port5<->None)
DRAM component: 1024 Mbits DDR, width 16
DRAM bus: 16 bit
Total memory: 128 MBytes
Flash component: SPI Flash
Date:Dec 12 2020  Time:20:54:25
============================================ 
icache: sets:512, ways:4, linesz:32 ,total:65536
dcache: sets:256, ways:4, linesz:32 ,total:32768 

 ##### The CPU freq = 580 MHZ #### 
 estimate memory size =128 Mbytes
RESET MT7628 PHY!!!!!!
GPIOMODE --> 50054404

GPIOMODE2 --> 5540551

Please choose the operation: 
   1: Load system code to SDRAM via TFTP. 
   2: Load system code then write to Flash via TFTP. 
   3: Boot system code via Flash (default).
   4: Entr boot command line interface.
   7: Load Boot Loader code then write to Flash via Serial. 
   9: Load Boot Loader code then write to Flash via TFTP.                                                    0 
(Re)start USB...
USB0:   *********ehci_hcd_init**********
Mediatek/Ralink USB EHCI host init hccr b01c0000 and hcor b01c0010 hc_length 16
 6. u2phydcr0(0xb0120860)=0x00aaaa02
 FM_OUT value: u4FmOut = 0(0x00000000)
 FM_OUT value: u4FmOut = 128(0x00000080)
 FM detection done! loop = 1
 SR calibration value u1SrCalVal = 6


Register 1111 NbrPorts 1
USB EHCI 1.00
scanning bus 0 for devices... 3 USB Device(s) found
       scanning bus for storage devices... Device NOT ready
   Request Sense returned 00 3A 00
1 Storage Device(s) found
Device NOT ready
   Request Sense returned 00 3A 00

** Unable to use usb 0:1 for fatload **
Could not find publickey1.file
stopping USB..
   
3: System Boot system code via Flash.
## Booting image at bc050000 ...
   Image Name:   MIPS OpenWrt Linux-5.4.82
   Image Type:   MIPS Linux Kernel Image (lzma compressed)
   Data Size:    1961612 Bytes =  1.9 MB
   Load Address: 80000000
   Entry Point:  80000000
   Verifying Checksum ... OK
   Uncompressing Kernel Image ... OK
No initrd
## Transferring control to Linux (at address 80000000) ...
## Giving linux memsize in MB, 128

Starting kernel ...

[    0.000000] Linux version 5.4.82 (qwer@qwer) (gcc version 8.4.0 (OpenWrt GCC 8.4.0 r14574-96023cd4ba)) #0 Thu Dec 10 19:33:51 2020




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Dec 5, 2020

binwalk firmware from openwrt src:
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             uImage header, header size: 64 bytes, header CRC: 0xBF4ACC07, created: 2020-10-22 14:13:38, image size: 1961554 bytes, Data Address: 0x80000000, Entry Point: 0x80000000, data CRC: 0x8579A9CF, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: "MIPS OpenWrt Linux-5.4.72"
64            0x40            LZMA compressed data, properties: 0x6D, dictionary size: 8388608 bytes, uncompressed size: 6178878 bytes
1961618       0x1DEE92        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 14051022 bytes, 1650 inodes, blocksize: 262144 bytes, created: 2020-10-22 14:13:38


binwalk firmware from "dd if=/dev/mtd3 of=/tmp/current_fw.bin"
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             uImage header, header size: 64 bytes, header CRC: 0xBF4ACC07, created: 2020-10-22 14:13:38, image size: 1961554 bytes, Data Address: 0x80000000, Entry Point: 0x80000000, data CRC: 0x8579A9CF, OS: Linux, CPU: MIPS, image type: OS Kernel Image, compression type: lzma, image name: "MIPS OpenWrt Linux-5.4.72"
64            0x40            LZMA compressed data, properties: 0x6D, dictionary size: 8388608 bytes, uncompressed size: 6178878 bytes
1961618       0x1DEE92        Squashfs filesystem, little endian, version 4.0, compression:xz, size: 14051022 bytes, 1650 inodes, blocksize: 262144 bytes, created: 2020-10-22 14:13:38
16056320      0xF50000        JFFS2 filesystem, little endian

----
firmware:
	header
		for uboot (MediaTek,Qualcomm): 0x27051956
	kernel
	rootfs
		squashfs
			hsqs...
	add-on (optional)
---- refer to image.h: (used in cmd_bootm.c)
#define IH_MAGIC	0x27051956	/* Image Magic Number		*/
#define IH_NMLEN		32	/* Image Name Length		*/

typedef struct image_header {
	uint32_t	ih_magic;	/* Image Header Magic Number	*/
	uint32_t	ih_hcrc;	/* Image Header CRC Checksum	*/
	uint32_t	ih_time;	/* Image Creation Timestamp	*/
	uint32_t	ih_size;	/* Image Data Size		*/
	uint32_t	ih_load;	/* Data	 Load  Address		*/
	uint32_t	ih_ep;		/* Entry Point Address		*/
	uint32_t	ih_dcrc;	/* Image Data CRC Checksum	*/
	uint8_t		ih_os;		/* Operating System		*/
	uint8_t		ih_arch;	/* CPU architecture		*/
	uint8_t		ih_type;	/* Image Type			*/
	uint8_t		ih_comp;	/* Compression Type		*/
	uint8_t		ih_name[IH_NMLEN];	/* Image Name		*/
} image_header_t;

modify cmd_bootm.c line 1318 and add something into the header for test: 
		Verifying Checksum ... Bad Data CRC



--------------------------------------------------------------------------------------------------------------
Nov 28, 2020

change the form of known keys by https://gchq.github.io/CyberChef/#recipe=PEM_to_Hex()Parse_ASN.1_hex_string(0,33) ,
	private key: from PEM to octet string in 32 bytes;
	public key: generated from 32 bytes by provided easy_ecc function (in easy_ecc_main.c)
	eg: 
		PrivKey: "MHcCAQEEICfrz3CsrsscS9h04p4Tt7JYuUmMvb0a/bLAE99lj8y5oAoGCCqGSM49AwEHoUQDQgAEaMDIHXKFZyLgNzintGwRYoXBo6hQ7vyEpudHeB8iHQr9n1fffwkJP3nIBm5TD9XEUjk72rAZEbylkSJOekTW0A==",
		PubKey:  "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEaMDIHXKFZyLgNzintGwRYoXBo6hQ7vyEpudHeB8iHQr9n1fffwkJP3nIBm5TD9XEUjk72rAZEbylkSJOekTW0A==",
		-------------------------->>>>>>>>>>>>>>>>>>>>>>>>
		SEQUENCE
		  INTEGER 01..(total 1bytes)..01
		  OCTETSTRING 27ebcf70acaecb1c4bd874e29e13b7b258b9498cbdbd1afdb2c013df658fccb9..(total 32bytes)..27ebcf70acaecb1c4bd874e29e13b7b258b9498cbdbd1afdb2c013df658fccb9
		  [0]
		    ObjectIdentifier secp256r1 (1 2 840 10045 3 1 7)
		  [1]
		    BITSTRING 000468c0c81d72856722e03738a7b46c116285c1a3a850eefc84a6e747781f221d0afd9f57df7f09093f79c8066e530fd5c452393bdab01911bca591224e7a44d6d0..(total 66bytes)..000468c0c81d72856722e03738a7b46c116285c1a3a850eefc84a6e747781f221d0afd9f57df7f09093f79c8066e530fd5c452393bdab01911bca591224e7a44d6d0
		
		SEQUENCE
		  SEQUENCE
		    ObjectIdentifier ecPublicKey (1 2 840 10045 2 1)
		    ObjectIdentifier secp256r1 (1 2 840 10045 3 1 7)
		  BITSTRING 
		000468c0c81d72856722e03738a7b46c116285c1a3a850eefc84a6e747781f221d0afd9f57df7f09093f79c8066e530fd5c452393bdab01911bca591224e7a44d6d0..(total 66bytes)..000468c0c81d72856722e03738a7b46c116285c1a3a850eefc84a6e747781f221d0afd9f57df7f09093f79c8066e530fd5c452393bdab01911bca591224e7a44d6d0
		-------------------------->>>>>>>>>>>>>>>>>>>>>>>>
		    68c0c81d72856722e03738a7b46c116285c1a3a850eefc84a6e747781f221d0a
		uint8_t privatekey_example1[] = { 0x27,0xeb,0xcf,0x70,0xac,0xae,0xcb,0x1c,
										0x4b,0xd8,0x74,0xe2,0x9e,0x13,0xb7,0xb2,
										0x58,0xb9,0x49,0x8c,0xbd,0xbd,0x1a,0xfd,
										0xb2,0xc0,0x13,0xdf,0x65,0x8f,0xcc,0xb9 };

		uint8_t publickey_example1[] = { 0x02, 0x68, 0xC0, 0xC8, 0x1D, 0x72, 0x85, 0x67,
										0x22, 0xE0, 0x37, 0x38, 0xA7, 0xB4, 0x6C, 0x11,
										0x62, 0x85, 0xC1, 0xA3, 0xA8, 0x50, 0xEE, 0xFC,
										0x84, 0xA6, 0xE7, 0x47, 0x78, 0x1F, 0x22, 0x1D,
										0x0A };
		                 (BITSTRING0004)   68 c0 c8 1d 72 85 67 
										22 e0 37 38 a7 b4 6c 11 
										62 85 c1 a3 a8 50 ee fc 
										84 a6 e7 47 78 1f 22 1d
										0a 
						p_publicKey[0] = 2 + (l_public1.y[0] & 0x01);

issues:
	most lightweight ecdsa I found do not support keys in PEM form, therefore form/type transformation (PEM to byte array) in advance is needed.
	buildroot gcc342 does not support openssl_1.1.1, and there are lots of errors when compiling this uboot codes by the latest buildroot gcc. if buildroot gcc compiler supports openssl, openssl can be used directly.

--------------------------------------------------------------------------------------------------------------
copy include files from uboot source codes (https://gitlab.denx.de/u-boot/u-boot) to /include

copy include/bits, include/sys, and ctype.h, endian.h, fcntl.h, features.h, stddef.h, unistd.h from buildroot_gcc342 include to /include

easy-ecc: https://github.com/jestan/easy-ecc

ecdsa with openssl is not used.

NOTE: stdio.h cannot be used while uboot compiling 